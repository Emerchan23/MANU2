import mysql from 'mysql2/promise'
import path from 'path'
import fs from 'fs'

// ‚ö†Ô∏è VERIFICA√á√ÉO DE SEGURAN√áA - PROIBI√á√ÉO DE BANCO NA PASTA SIS MANU ‚ö†Ô∏è
function verificarLocalizacaoBanco() {
  // S√≥ executar no servidor (Node.js), n√£o no browser
  if (typeof window !== 'undefined') {
    return; // Est√° no browser, n√£o executar
  }
  
  const dbDataPath = process.env.DB_DATA_PATH;
  const currentDir = process.cwd();
  
  // Verificar se DB_DATA_PATH est√° configurado
  if (!dbDataPath) {
    console.warn('‚ö†Ô∏è AVISO: DB_DATA_PATH n√£o configurado, usando configura√ß√£o padr√£o do banco');
    return;
  }
  
  // Verificar se o caminho n√£o aponta para dentro da pasta sis manu
  const resolvedPath = path.resolve(dbDataPath);
  const projectPath = path.resolve(currentDir);
  
  if (resolvedPath.startsWith(projectPath)) {
    console.warn(`‚ö†Ô∏è AVISO: Banco de dados est√° dentro da pasta 'sis manu'!\nCaminho detectado: ${resolvedPath}\nRecomenda-se configurar DB_DATA_PATH para apontar para '../banco de dados'`);
    return;
  }
  
  // Verificar se a pasta externa existe
  if (!fs.existsSync(resolvedPath)) {
    console.warn(`‚ö†Ô∏è AVISO: Pasta externa '${resolvedPath}' n√£o existe. Ser√° criada automaticamente.`);
  }
  
  console.log(`‚úÖ VERIFICA√á√ÉO APROVADA: Banco configurado corretamente na pasta externa: ${resolvedPath}`);
}

// Executar verifica√ß√£o na inicializa√ß√£o apenas no servidor
if (typeof window === 'undefined') {
  try {
    verificarLocalizacaoBanco();
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro na verifica√ß√£o do banco:', error.message);
  }
}

// Configura√ß√£o do banco de dados com otimiza√ß√µes avan√ßadas para MariaDB
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'hospital_maintenance',
  port: parseInt(process.env.DB_PORT || '3306'),
  charset: 'utf8mb4',
  timezone: '+00:00',
  // Configura√ß√µes de pool otimizadas para 30 usu√°rios simult√¢neos
  connectionLimit: 10, // Reduzido drasticamente para evitar sobrecarga
  acquireTimeout: 10000, // 10 segundos - reduzido para falhar mais r√°pido
  timeout: 15000, // 15 segundos timeout - reduzido para queries mais r√°pidas
  reconnect: true, // Reconex√£o habilitada com controle
  waitForConnections: true, // Esperar por conex√µes com timeout
  queueLimit: 100, // Fila aumentada para suportar m√∫ltiplas requisi√ß√µes de dashboard
  // Configura√ß√µes de seguran√ßa
  multipleStatements: false, // Seguran√ßa
  dateStrings: false,
  supportBigNumbers: true,
  bigNumberStrings: false,
  // Configura√ß√µes de performance
  idleTimeout: 10000, // 10 segundos para conex√µes idle - muito mais agressivo
  maxIdle: 1, // M√°ximo 1 conex√£o idle
  // Configura√ß√µes de reconex√£o
  maxReconnects: 3,
  reconnectDelay: 2000,
  // Configura√ß√µes de keep-alive
  enableKeepAlive: true,
  keepAliveInitialDelay: 0,
  // SSL desabilitado para desenvolvimento local
  ssl: false
};

let pool

function createPool() {
  // S√≥ criar pool no servidor (Node.js), n√£o no browser
  if (typeof window !== 'undefined') {
    throw new Error('Database operations are not allowed on the client side');
  }
  
  if (!pool) {
    console.log('üîÑ Criando novo pool de conex√µes MariaDB...')
    pool = mysql.createPool(dbConfig)
    
    // Event listeners para monitorar o pool com m√©tricas avan√ßadas
    pool.on('connection', (connection) => {
      console.log('‚úÖ Nova conex√£o estabelecida como id ' + connection.threadId)
      console.log('üìä Pool Status - Conex√µes ativas:', pool._allConnections?.length || 0)
    })
    
    pool.on('error', (err) => {
      console.error('‚ùå Erro no pool de conex√µes:', err)
      if (err.code === 'PROTOCOL_CONNECTION_LOST') {
        console.log('üîÑ Reconectando ao banco de dados...')
        pool = null // For√ßar recria√ß√£o do pool
      }
    })
    
    pool.on('acquire', (connection) => {
      console.log('üîó Conex√£o %d adquirida - Pool: %d ativas, %d livres', 
        connection.threadId, 
        pool._acquiringConnections?.length || 0,
        pool._freeConnections?.length || 0
      )
    })
    
    pool.on('release', (connection) => {
      console.log('üîì Conex√£o %d liberada - Pool: %d ativas, %d livres', 
        connection.threadId,
        pool._acquiringConnections?.length || 0,
        pool._freeConnections?.length || 0
      )
    })
    
    console.log('‚úÖ Pool de conex√µes criado com sucesso')
  }
  return pool
}

async function query(sql, params = []) {
  // S√≥ executar no servidor (Node.js), n√£o no browser
  if (typeof window !== 'undefined') {
    throw new Error('Database queries are not allowed on the client side');
  }
  
  const poolInstance = createPool()
  let connection = null
  let retryCount = 0
  const maxRetries = 3
  const baseDelay = 1000 // 1 segundo base para backoff exponencial
  
  while (retryCount < maxRetries) {
    try {
      console.log('üîç [DATABASE QUERY] SQL:', sql)
      console.log('üîç [DATABASE QUERY] Par√¢metros:', params)
      
      // Garantir que params seja um array
      const safeParams = Array.isArray(params) ? params : []
      
      // Obter conex√£o do pool com timeout
      connection = await poolInstance.getConnection()
      
      // Verificar se a conex√£o est√° ativa
      await connection.ping()
      
      // Usar query para prepared statements
      let results
      console.log('üîç [DATABASE QUERY] Executando query com par√¢metros seguros:', safeParams)
      
      if (safeParams.length === 0) {
        console.log('üîç [DATABASE QUERY] Executando sem par√¢metros')
        results = await connection.query(sql)
      } else {
        console.log('üîç [DATABASE QUERY] Executando com par√¢metros:', safeParams)
        results = await connection.query(sql, safeParams)
      }
      
      // Extrair apenas os dados da resposta
      const rows = results && results[0] ? results[0] : results
      
      console.log('‚úÖ [DATABASE QUERY] Resultado obtido com sucesso')
      return rows
      
    } catch (error) {
      retryCount++
      console.error(`‚ùå [DATABASE QUERY] Erro (tentativa ${retryCount}/${maxRetries}):`, error.message)
      
      // Verificar se √© erro de "Too many connections"
      if (error.code === 'ER_CON_COUNT_ERROR') {
        console.error('üö® ERRO CR√çTICO: Too many connections detectado!')
        const delay = baseDelay * Math.pow(2, retryCount - 1) // Backoff exponencial
        console.log(`‚è≥ Aguardando ${delay}ms antes de tentar novamente...`)
        await new Promise(resolve => setTimeout(resolve, delay))
        
        // For√ßar recria√ß√£o do pool
        pool = null
        continue
      }
      
      // Se for erro de conex√£o e ainda temos tentativas, retry
      if ((error.code === 'PROTOCOL_CONNECTION_LOST' || 
           error.code === 'ECONNRESET' || 
           error.code === 'ETIMEDOUT' ||
           error.code === 'ENOTFOUND') && retryCount < maxRetries) {
        
        const delay = baseDelay * Math.pow(2, retryCount - 1) // Backoff exponencial
        console.log(`üîÑ Tentando novamente em ${delay}ms... (${retryCount}/${maxRetries})`)
        await new Promise(resolve => setTimeout(resolve, delay))
        
        // For√ßar recria√ß√£o do pool se necess√°rio
        if (error.code === 'PROTOCOL_CONNECTION_LOST') {
          pool = null
        }
        continue
      }
      
      // Se n√£o √© erro de conex√£o ou esgotamos as tentativas, throw
      console.error("‚ùå [DATABASE QUERY] Erro final:", error)
      console.error("‚ùå [DATABASE QUERY] SQL:", sql)
      console.error("‚ùå [DATABASE QUERY] Par√¢metros:", params)
      console.error("‚ùå [DATABASE QUERY] Stack:", error.stack)
      throw error
    } finally {
      // Sempre liberar a conex√£o de volta ao pool
      if (connection) {
        try {
          connection.release()
          console.log('üîì Conex√£o liberada de volta ao pool')
        } catch (releaseError) {
          console.error('‚ùå Erro ao liberar conex√£o:', releaseError.message)
        }
      }
    }
  }
}

// Alternative query function for operations that might have issues with prepared statements
async function queryDirect(sql, params = []) {
  // S√≥ executar no servidor (Node.js), n√£o no browser
  if (typeof window !== 'undefined') {
    throw new Error('Database queries are not allowed on the client side');
  }
  
  const connection = createPool()
  try {
    console.log('üîç [DATABASE DIRECT] SQL:', sql)
    console.log('üîç [DATABASE DIRECT] Par√¢metros:', params)
    
    // Garantir que params seja um array
    const safeParams = Array.isArray(params) ? params : []
    
    let results
    if (safeParams.length === 0) {
      [results] = await connection.query(sql)
    } else {
      [results] = await connection.query(sql, safeParams)
    }
    
    console.log('‚úÖ [DATABASE DIRECT] Resultado:', results)
    return results
  } catch (error) {
    console.error("‚ùå [DATABASE DIRECT] Erro:", error)
    console.error("‚ùå [DATABASE DIRECT] SQL:", sql)
    console.error("‚ùå [DATABASE DIRECT] Par√¢metros:", params)
    throw error
  }
}

async function getNextNumber(entityType) {
  // S√≥ executar no servidor (Node.js), n√£o no browser
  if (typeof window !== 'undefined') {
    throw new Error('Database operations are not allowed on the client side');
  }
  
  const currentYear = new Date().getFullYear()

  // Get or create counter for current year
  await query(
    "INSERT INTO counters (entity_type, year, counter) VALUES (?, ?, 0) ON DUPLICATE KEY UPDATE counter = counter",
    [entityType, currentYear],
  )

  // Increment counter
  await query("UPDATE counters SET counter = counter + 1 WHERE entity_type = ? AND year = ?", [entityType, currentYear])

  // Get new counter value
  const result = await query("SELECT counter FROM counters WHERE entity_type = ? AND year = ?", [
    entityType,
    currentYear,
  ])

  const counter = result[0].counter

  // Format based on entity type
  switch (entityType) {
    case "service_orders":
      return `OS-${counter.toString().padStart(3, "0")}-${currentYear}`
    case "equipment":
      return `EQ-${counter.toString().padStart(2, "0")}/${currentYear}`
    case "companies":
      return `EMP-${counter.toString().padStart(2, "0")}/${currentYear}`
    default:
      return `${counter.toString().padStart(2, "0")}/${currentYear}`
  }
}

// Execute function for INSERT/UPDATE/DELETE operations
async function execute(sql, params = []) {
  // S√≥ executar no servidor (Node.js), n√£o no browser
  if (typeof window !== 'undefined') {
    throw new Error('Database operations are not allowed on the client side');
  }
  
  try {
    console.log('üîç [DATABASE] Executando SQL:', sql)
    console.log('üîç [DATABASE] Par√¢metros:', params)
    
    const connection = createPool()
    const [result] = await connection.execute(sql, params)
    
    console.log('‚úÖ [DATABASE] Resultado:', result)
    return result
  } catch (error) {
    console.error("‚ùå [DATABASE] Erro na execu√ß√£o:", error)
    console.error("‚ùå [DATABASE] SQL:", sql)
    console.error("‚ùå [DATABASE] Par√¢metros:", params)
    throw error
  }
}

// Fun√ß√£o getConnection para compatibilidade com as APIs de relat√≥rios
async function getConnection() {
  // S√≥ executar no servidor (Node.js), n√£o no browser
  if (typeof window !== 'undefined') {
    throw new Error('Database operations are not allowed on the client side');
  }
  
  const pool = createPool()
  return pool.getConnection()
}

export {
  query,
  queryDirect,
  getNextNumber,
  createPool,
  execute,
  getConnection,
}
