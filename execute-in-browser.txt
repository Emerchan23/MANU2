INSTRU√á√ïES PARA EXECUTAR NO CONSOLE DO NAVEGADOR:

1. Abra o navegador na p√°gina: http://localhost:3000/agendamentos/novo
2. Pressione F12 para abrir as ferramentas de desenvolvedor
3. V√° para a aba "Console"
4. Cole e execute o seguinte c√≥digo JavaScript:

// Script para criar agendamento completo com todos os campos
console.log('üöÄ INICIANDO CRIA√á√ÉO DE AGENDAMENTO COMPLETO');

// Fun√ß√£o para aguardar elemento aparecer
function waitForElement(selector, timeout = 10000) {
  return new Promise((resolve, reject) => {
    const element = document.querySelector(selector);
    if (element) {
      resolve(element);
      return;
    }

    const observer = new MutationObserver(() => {
      const element = document.querySelector(selector);
      if (element) {
        observer.disconnect();
        resolve(element);
      }
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });

    setTimeout(() => {
      observer.disconnect();
      reject(new Error(`Elemento ${selector} n√£o encontrado em ${timeout}ms`));
    }, timeout);
  });
}

// Fun√ß√£o para simular evento de mudan√ßa
function triggerChange(element) {
  element.dispatchEvent(new Event('change', { bubbles: true }));
  element.dispatchEvent(new Event('input', { bubbles: true }));
  element.dispatchEvent(new Event('blur', { bubbles: true }));
}

// Fun√ß√£o para aguardar um tempo
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Fun√ß√£o principal de preenchimento
async function createCompleteAppointment() {
  try {
    console.log('üìã Iniciando preenchimento do formul√°rio...');
    
    // Aguardar a p√°gina carregar completamente
    await sleep(2000);

    // 1. Empresa Prestadora (se existir)
    console.log('1Ô∏è‚É£ Tentando selecionar empresa...');
    try {
      const empresaSelect = await waitForElement('select[name="companyId"], select[name="company_id"], select[name="serviceCompanyId"]', 3000);
      if (empresaSelect && empresaSelect.options.length > 1) {
        empresaSelect.value = empresaSelect.options[1].value; // Primeira op√ß√£o v√°lida
        triggerChange(empresaSelect);
        console.log('‚úÖ Empresa selecionada:', empresaSelect.options[empresaSelect.selectedIndex].text);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Campo empresa n√£o encontrado ou n√£o dispon√≠vel');
    }

    await sleep(1000);

    // 2. Equipamento (OBRIGAT√ìRIO)
    console.log('2Ô∏è‚É£ Selecionando equipamento...');
    try {
      const equipamentoSelect = await waitForElement('select[name="equipmentId"], select[name="equipment_id"]', 5000);
      if (equipamentoSelect && equipamentoSelect.options.length > 1) {
        // Procurar por "Ventilador" ou usar a primeira op√ß√£o v√°lida
        let selectedOption = null;
        for (let i = 1; i < equipamentoSelect.options.length; i++) {
          if (equipamentoSelect.options[i].text.toLowerCase().includes('ventilador')) {
            selectedOption = equipamentoSelect.options[i];
            break;
          }
        }
        if (!selectedOption) {
          selectedOption = equipamentoSelect.options[1]; // Primeira op√ß√£o v√°lida
        }
        
        equipamentoSelect.value = selectedOption.value;
        triggerChange(equipamentoSelect);
        console.log('‚úÖ Equipamento selecionado:', selectedOption.text);
      } else {
        throw new Error('Nenhum equipamento dispon√≠vel');
      }
    } catch (error) {
      console.error('‚ùå Erro ao selecionar equipamento:', error.message);
      return;
    }

    await sleep(1000);

    // 3. Tipo de Manuten√ß√£o (OBRIGAT√ìRIO)
    console.log('3Ô∏è‚É£ Selecionando tipo de manuten√ß√£o...');
    try {
      const tipoSelect = await waitForElement('select[name="maintenanceType"], select[name="maintenance_type"], select[name="maintenanceTypeId"]', 5000);
      if (tipoSelect && tipoSelect.options.length > 1) {
        // Procurar por "Preventiva" ou usar a primeira op√ß√£o v√°lida
        let selectedOption = null;
        for (let i = 1; i < tipoSelect.options.length; i++) {
          if (tipoSelect.options[i].text.toLowerCase().includes('preventiva')) {
            selectedOption = tipoSelect.options[i];
            break;
          }
        }
        if (!selectedOption) {
          selectedOption = tipoSelect.options[1]; // Primeira op√ß√£o v√°lida
        }
        
        tipoSelect.value = selectedOption.value;
        triggerChange(tipoSelect);
        console.log('‚úÖ Tipo de manuten√ß√£o selecionado:', selectedOption.text);
      } else {
        throw new Error('Nenhum tipo de manuten√ß√£o dispon√≠vel');
      }
    } catch (error) {
      console.error('‚ùå Erro ao selecionar tipo de manuten√ß√£o:', error.message);
      return;
    }

    await sleep(1000);

    // 4. Template (se existir)
    console.log('4Ô∏è‚É£ Tentando selecionar template...');
    try {
      const templateSelect = await waitForElement('select[name="template"], select[name="templateId"]', 3000);
      if (templateSelect && templateSelect.options.length > 1) {
        templateSelect.value = templateSelect.options[1].value;
        triggerChange(templateSelect);
        console.log('‚úÖ Template selecionado:', templateSelect.options[templateSelect.selectedIndex].text);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Campo template n√£o encontrado ou n√£o dispon√≠vel');
    }

    await sleep(1000);

    // 5. Descri√ß√£o do Servi√ßo (OBRIGAT√ìRIO)
    console.log('5Ô∏è‚É£ Preenchendo descri√ß√£o...');
    try {
      const descricaoTextarea = await waitForElement('textarea[name="description"], textarea[name="serviceDescription"]', 5000);
      const descricaoTexto = 'Manuten√ß√£o preventiva completa do ventilador pulmonar, incluindo verifica√ß√£o de todos os componentes, calibra√ß√£o dos sensores, limpeza dos filtros e teste de funcionamento. Procedimento essencial para garantir a seguran√ßa e efici√™ncia do equipamento m√©dico.';
      descricaoTextarea.value = descricaoTexto;
      triggerChange(descricaoTextarea);
      console.log('‚úÖ Descri√ß√£o preenchida');
    } catch (error) {
      console.error('‚ùå Erro ao preencher descri√ß√£o:', error.message);
      return;
    }

    await sleep(1000);

    // 6. Data Agendada (OBRIGAT√ìRIO)
    console.log('6Ô∏è‚É£ Definindo data agendada...');
    try {
      const dataInput = await waitForElement('input[name="scheduledDate"], input[name="scheduled_date"], input[type="date"]', 5000);
      const dataFutura = new Date();
      dataFutura.setDate(dataFutura.getDate() + 30); // 30 dias no futuro
      const dataFormatada = dataFutura.toISOString().split('T')[0]; // YYYY-MM-DD
      dataInput.value = dataFormatada;
      triggerChange(dataInput);
      console.log('‚úÖ Data agendada definida:', dataFormatada);
    } catch (error) {
      console.error('‚ùå Erro ao definir data:', error.message);
      return;
    }

    await sleep(1000);

    // 7. Prioridade (OBRIGAT√ìRIO)
    console.log('7Ô∏è‚É£ Definindo prioridade...');
    try {
      const prioridadeSelect = await waitForElement('select[name="priority"]', 5000);
      if (prioridadeSelect && prioridadeSelect.options.length > 0) {
        // Procurar por "Alta" ou "ALTA"
        let selectedOption = null;
        for (let i = 0; i < prioridadeSelect.options.length; i++) {
          const optionText = prioridadeSelect.options[i].text.toLowerCase();
          const optionValue = prioridadeSelect.options[i].value.toLowerCase();
          if (optionText.includes('alta') || optionValue.includes('alta') || optionValue === 'high') {
            selectedOption = prioridadeSelect.options[i];
            break;
          }
        }
        if (!selectedOption && prioridadeSelect.options.length > 1) {
          selectedOption = prioridadeSelect.options[1]; // Segunda op√ß√£o se n√£o encontrar "Alta"
        }
        if (selectedOption) {
          prioridadeSelect.value = selectedOption.value;
          triggerChange(prioridadeSelect);
          console.log('‚úÖ Prioridade definida:', selectedOption.text);
        }
      }
    } catch (error) {
      console.error('‚ùå Erro ao definir prioridade:', error.message);
    }

    await sleep(1000);

    // 8. Valor Estimado
    console.log('8Ô∏è‚É£ Definindo valor estimado...');
    try {
      const valorInput = await waitForElement('input[name="estimatedValue"], input[name="estimated_cost"], input[name="estimatedCost"]', 3000);
      if (valorInput) {
        valorInput.value = '850.00';
        triggerChange(valorInput);
        console.log('‚úÖ Valor estimado definido: R$ 850,00');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Campo valor estimado n√£o encontrado');
    }

    await sleep(1000);

    // 9. Respons√°vel
    console.log('9Ô∏è‚É£ Selecionando respons√°vel...');
    try {
      const responsavelSelect = await waitForElement('select[name="assignedTo"], select[name="assigned_user_id"], select[name="assignedUserId"]', 3000);
      if (responsavelSelect && responsavelSelect.options.length > 1) {
        responsavelSelect.value = responsavelSelect.options[1].value; // Primeira op√ß√£o v√°lida
        triggerChange(responsavelSelect);
        console.log('‚úÖ Respons√°vel selecionado:', responsavelSelect.options[responsavelSelect.selectedIndex].text);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Campo respons√°vel n√£o encontrado');
    }

    await sleep(1000);

    // 10. Recorr√™ncia (se existir)
    console.log('üîü Tentando definir recorr√™ncia...');
    try {
      const recorrenciaSelect = await waitForElement('select[name="recurrenceType"], select[name="recurrence"]', 3000);
      if (recorrenciaSelect && recorrenciaSelect.options.length > 1) {
        // Procurar por "Mensal"
        let selectedOption = null;
        for (let i = 1; i < recorrenciaSelect.options.length; i++) {
          if (recorrenciaSelect.options[i].text.toLowerCase().includes('mensal')) {
            selectedOption = recorrenciaSelect.options[i];
            break;
          }
        }
        if (!selectedOption) {
          selectedOption = recorrenciaSelect.options[1]; // Primeira op√ß√£o v√°lida
        }
        
        recorrenciaSelect.value = selectedOption.value;
        triggerChange(recorrenciaSelect);
        console.log('‚úÖ Recorr√™ncia definida:', selectedOption.text);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Campo recorr√™ncia n√£o encontrado');
    }

    await sleep(1000);

    // 11. Observa√ß√µes
    console.log('1Ô∏è‚É£1Ô∏è‚É£ Preenchendo observa√ß√µes...');
    try {
      const observacoesTextarea = await waitForElement('textarea[name="observations"], textarea[name="notes"], textarea[name="instructions"]', 3000);
      if (observacoesTextarea) {
        const observacoesTexto = 'Teste completo de todos os campos do formul√°rio de agendamento. Verificar se todos os dados s√£o salvos corretamente no banco MariaDB. Agendamento criado automaticamente para valida√ß√£o do sistema.';
        observacoesTextarea.value = observacoesTexto;
        triggerChange(observacoesTextarea);
        console.log('‚úÖ Observa√ß√µes preenchidas');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Campo observa√ß√µes n√£o encontrado');
    }

    await sleep(2000);

    console.log('üéâ FORMUL√ÅRIO PREENCHIDO COM SUCESSO!');
    console.log('üì§ Pronto para submeter...');

    // 12. Submeter formul√°rio
    console.log('üöÄ Submetendo formul√°rio...');
    try {
      const submitButton = await waitForElement('button[type="submit"], input[type="submit"], button:contains("Criar"), button:contains("Salvar")', 5000);
      if (submitButton) {
        submitButton.click();
        console.log('‚úÖ Formul√°rio submetido!');
        
        // Aguardar resposta
        await sleep(3000);
        
        // Verificar se houve sucesso ou erro
        const successMessage = document.querySelector('.success, .alert-success, [class*="success"]');
        const errorMessage = document.querySelector('.error, .alert-error, .alert-danger, [class*="error"]');
        
        if (successMessage) {
          console.log('üéâ SUCESSO! Agendamento criado com sucesso!');
          console.log('Mensagem:', successMessage.textContent);
        } else if (errorMessage) {
          console.log('‚ùå ERRO na submiss√£o!');
          console.log('Mensagem de erro:', errorMessage.textContent);
        } else {
          console.log('‚ö†Ô∏è Submiss√£o realizada, mas n√£o foi poss√≠vel detectar o resultado');
        }
        
      } else {
        console.log('‚ùå Bot√£o de submiss√£o n√£o encontrado');
      }
    } catch (error) {
      console.error('‚ùå Erro ao submeter formul√°rio:', error.message);
    }

  } catch (error) {
    console.error('‚ùå Erro geral na cria√ß√£o do agendamento:', error);
  }
}

// Executar a fun√ß√£o
createCompleteAppointment();

5. Pressione Enter para executar o script
6. Acompanhe as mensagens no console para ver o progresso
7. O script ir√° preencher automaticamente todos os campos e submeter o formul√°rio