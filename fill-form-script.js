// Script para preencher automaticamente o formul√°rio de agendamento
console.log('üöÄ Iniciando preenchimento autom√°tico do formul√°rio...');

// Fun√ß√£o para aguardar elemento aparecer
function waitForElement(selector, timeout = 5000) {
  return new Promise((resolve, reject) => {
    const element = document.querySelector(selector);
    if (element) {
      resolve(element);
      return;
    }

    const observer = new MutationObserver(() => {
      const element = document.querySelector(selector);
      if (element) {
        observer.disconnect();
        resolve(element);
      }
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });

    setTimeout(() => {
      observer.disconnect();
      reject(new Error(`Elemento ${selector} n√£o encontrado em ${timeout}ms`));
    }, timeout);
  });
}

// Fun√ß√£o para simular evento de mudan√ßa
function triggerChange(element) {
  element.dispatchEvent(new Event('change', { bubbles: true }));
  element.dispatchEvent(new Event('input', { bubbles: true }));
}

// Fun√ß√£o principal de preenchimento
async function fillForm() {
  try {
    console.log('üìã Preenchendo formul√°rio...');

    // 1. Empresa Prestadora
    console.log('1Ô∏è‚É£ Selecionando empresa...');
    const empresaSelect = await waitForElement('select[name="companyId"]');
    empresaSelect.value = '1'; // TechMed Solu√ß√µes
    triggerChange(empresaSelect);
    console.log('‚úÖ Empresa selecionada: TechMed Solu√ß√µes');

    // Aguardar um pouco para carregar equipamentos
    await new Promise(resolve => setTimeout(resolve, 1000));

    // 2. Equipamento
    console.log('2Ô∏è‚É£ Selecionando equipamento...');
    const equipamentoSelect = await waitForElement('select[name="equipmentId"]');
    equipamentoSelect.value = '3'; // Ventilador Pulmonar
    triggerChange(equipamentoSelect);
    console.log('‚úÖ Equipamento selecionado: Ventilador Pulmonar');

    // 3. Tipo de Manuten√ß√£o
    console.log('3Ô∏è‚É£ Selecionando tipo de manuten√ß√£o...');
    const tipoSelect = await waitForElement('select[name="maintenanceTypeId"]');
    tipoSelect.value = '1'; // Preventiva
    triggerChange(tipoSelect);
    console.log('‚úÖ Tipo de manuten√ß√£o: Preventiva');

    // 4. Descri√ß√£o do Servi√ßo
    console.log('4Ô∏è‚É£ Preenchendo descri√ß√£o...');
    const descricaoTextarea = await waitForElement('textarea[name="description"]');
    descricaoTextarea.value = 'Manuten√ß√£o preventiva completa do ventilador pulmonar incluindo verifica√ß√£o de filtros, calibra√ß√£o de sensores, teste de alarmes e limpeza geral do equipamento';
    triggerChange(descricaoTextarea);
    console.log('‚úÖ Descri√ß√£o preenchida');

    // 5. Data Agendada
    console.log('5Ô∏è‚É£ Definindo data...');
    const dataInput = await waitForElement('input[name="scheduledDate"]');
    dataInput.value = '2025-02-15';
    triggerChange(dataInput);
    console.log('‚úÖ Data agendada: 15/02/2025');

    // 6. Prioridade
    console.log('6Ô∏è‚É£ Definindo prioridade...');
    const prioridadeSelect = await waitForElement('select[name="priority"]');
    prioridadeSelect.value = 'alta';
    triggerChange(prioridadeSelect);
    console.log('‚úÖ Prioridade: Alta');

    // 7. Valor Estimado
    console.log('7Ô∏è‚É£ Definindo valor...');
    const valorInput = await waitForElement('input[name="estimatedValue"]');
    valorInput.value = '850.00';
    triggerChange(valorInput);
    console.log('‚úÖ Valor estimado: R$ 850,00');

    // 8. Respons√°vel
    console.log('8Ô∏è‚É£ Selecionando respons√°vel...');
    const responsavelSelect = await waitForElement('select[name="assignedTo"]');
    responsavelSelect.value = '1'; // Teste Usuario
    triggerChange(responsavelSelect);
    console.log('‚úÖ Respons√°vel: Teste Usuario');

    // 9. Recorr√™ncia (se existir)
    try {
      console.log('9Ô∏è‚É£ Definindo recorr√™ncia...');
      const recorrenciaSelect = await waitForElement('select[name="recurrenceType"]', 2000);
      recorrenciaSelect.value = 'mensal';
      triggerChange(recorrenciaSelect);
      console.log('‚úÖ Recorr√™ncia: Mensal');
    } catch (error) {
      console.log('‚ö†Ô∏è Campo de recorr√™ncia n√£o encontrado');
    }

    console.log('üéâ Formul√°rio preenchido com sucesso!');
    console.log('üì§ Pronto para submeter...');

    // Aguardar um pouco antes de submeter
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 10. Submeter formul√°rio
    console.log('üöÄ Submetendo formul√°rio...');
    const submitButton = await waitForElement('button[type="submit"]');
    submitButton.click();
    console.log('‚úÖ Formul√°rio submetido!');

  } catch (error) {
    console.error('‚ùå Erro ao preencher formul√°rio:', error);
  }
}

// Executar ap√≥s carregamento da p√°gina
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', fillForm);
} else {
  fillForm();
}