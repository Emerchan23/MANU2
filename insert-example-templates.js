import dotenv from 'dotenv';
import mysql from 'mysql2/promise';

// Carregar vari√°veis de ambiente
dotenv.config();

// Configura√ß√£o do banco de dados
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'hospital_maintenance',
  charset: 'utf8mb4',
  timezone: '+00:00'
};

// Templates de exemplo para inserir
const exampleTemplates = [
  {
    name: 'Manuten√ß√£o Preventiva Completa',
    category_id: 4, // Manuten√ß√£o Preventiva
    description: `MANUTEN√á√ÉO PREVENTIVA COMPLETA

1. INSPE√á√ÉO VISUAL GERAL:
   - Verificar estado geral do equipamento
   - Identificar sinais de desgaste, corros√£o ou danos
   - Verificar integridade de cabos e conex√µes
   - Inspecionar painel de controle e displays

2. LIMPEZA E HIGIENIZA√á√ÉO:
   - Limpeza externa com produtos adequados
   - Limpeza interna (quando aplic√°vel)
   - Desinfec√ß√£o de superf√≠cies de contato
   - Remo√ß√£o de poeira e detritos

3. VERIFICA√á√ïES EL√âTRICAS:
   - Teste de continuidade el√©trica
   - Verifica√ß√£o de aterramento
   - Medi√ß√£o de corrente e tens√£o
   - Inspe√ß√£o de fus√≠veis e disjuntores

4. VERIFICA√á√ïES MEC√ÇNICAS:
   - Lubrifica√ß√£o de partes m√≥veis
   - Ajuste de tens√£o de correias
   - Verifica√ß√£o de rolamentos e buchas
   - Teste de movimenta√ß√£o e alinhamento

5. CALIBRA√á√ÉO E TESTES:
   - Verifica√ß√£o de precis√£o dos sensores
   - Calibra√ß√£o conforme especifica√ß√µes
   - Testes de funcionamento em diferentes modos
   - Verifica√ß√£o de alarmes e sistemas de seguran√ßa

6. DOCUMENTA√á√ÉO:
   - Registro de todas as atividades realizadas
   - Anota√ß√£o de valores medidos
   - Recomenda√ß√µes para pr√≥ximas manuten√ß√µes
   - Atualiza√ß√£o do hist√≥rico do equipamento

Tempo estimado: _______________
Pr√≥xima manuten√ß√£o: _______________
T√©cnico respons√°vel: _______________`,
    is_active: true
  },
  {
    name: 'Reparo de Equipamento Eletr√¥nico',
    category_id: 3, // Manuten√ß√£o Corretiva
    description: `REPARO DE EQUIPAMENTO ELETR√îNICO

1. DIAGN√ìSTICO INICIAL:
   - An√°lise dos sintomas reportados
   - Verifica√ß√£o do hist√≥rico de falhas
   - Inspe√ß√£o visual dos componentes
   - Teste b√°sico de funcionamento

2. TESTES DIAGN√ìSTICOS:
   - Medi√ß√£o de tens√µes nos pontos de teste
   - Verifica√ß√£o de sinais de entrada e sa√≠da
   - Teste de componentes individuais
   - An√°lise de circuitos com mult√≠metro/oscilosc√≥pio

3. IDENTIFICA√á√ÉO DO PROBLEMA:
   - Localiza√ß√£o do componente defeituoso
   - An√°lise da causa raiz da falha
   - Verifica√ß√£o de componentes relacionados
   - Avalia√ß√£o do impacto no sistema

4. EXECU√á√ÉO DO REPARO:
   - Desligamento e isolamento do equipamento
   - Substitui√ß√£o de componentes defeituosos
   - Soldagem e conex√µes conforme padr√µes
   - Limpeza da √°rea de trabalho

5. TESTES P√ìS-REPARO:
   - Verifica√ß√£o de funcionamento b√°sico
   - Teste de todos os modos operacionais
   - Verifica√ß√£o de par√¢metros de seguran√ßa
   - Teste de estresse e estabilidade

6. VALIDA√á√ÉO E ENTREGA:
   - Calibra√ß√£o final do equipamento
   - Teste de aceita√ß√£o com usu√°rio
   - Documenta√ß√£o do reparo realizado
   - Orienta√ß√µes de uso e cuidados

Problema identificado: _______________
Componentes substitu√≠dos: _______________
Tempo de reparo: _______________
Garantia do servi√ßo: _______________
T√©cnico respons√°vel: _______________`,
    is_active: true
  }
];

async function insertExampleTemplates() {
  let connection;
  
  try {
    console.log('üîÑ Inserindo templates de exemplo...');
    
    // Conectar ao banco de dados
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Conectado ao banco de dados');
    
    // Inserir cada template
    for (let i = 0; i < exampleTemplates.length; i++) {
      const template = exampleTemplates[i];
      
      try {
        console.log(`üìù Inserindo template: ${template.name}`);
        
        const [result] = await connection.execute(`
          INSERT INTO service_description_templates 
          (name, category_id, description, is_active, created_at, updated_at)
          VALUES (?, ?, ?, ?, NOW(), NOW())
        `, [
          template.name,
          template.category_id,
          template.description,
          template.is_active
        ]);
        
        console.log(`‚úÖ Template inserido com ID: ${result.insertId}`);
        
      } catch (error) {
        if (error.code === 'ER_DUP_ENTRY') {
          console.log(`‚ö†Ô∏è Template '${template.name}' j√° existe (ignorando)`);
        } else {
          console.error(`‚ùå Erro ao inserir template '${template.name}':`, error.message);
          throw error;
        }
      }
    }
    
    // Verificar total de templates
    const [count] = await connection.execute('SELECT COUNT(*) as total FROM service_description_templates');
    console.log(`\nüìä Total de templates no banco: ${count[0].total}`);
    
    console.log('üéâ Templates de exemplo inseridos com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå Conex√£o fechada');
    }
  }
}

// Executar inser√ß√£o
insertExampleTemplates();