// Script para executar automa√ß√£o no navegador
const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');

async function executeBrowserAutomation() {
    let browser;
    
    try {
        console.log('üöÄ Iniciando automa√ß√£o do navegador...');
        
        // Ler o script de preenchimento
        const scriptPath = path.join(__dirname, 'auto-fill-appointment-final.js');
        const fillScript = fs.readFileSync(scriptPath, 'utf8');
        
        // Iniciar o navegador
        browser = await puppeteer.launch({
            headless: false, // Mostrar o navegador
            defaultViewport: null,
            args: ['--start-maximized']
        });
        
        const page = await browser.newPage();
        
        // Navegar para a p√°gina de agendamento
        console.log('üìç Navegando para a p√°gina de agendamento...');
        await page.goto('http://localhost:3000/agendamentos/novo', {
            waitUntil: 'networkidle2',
            timeout: 30000
        });
        
        console.log('‚úÖ P√°gina carregada');
        
        // Aguardar um pouco para garantir que tudo carregou
        await page.waitForTimeout(2000);
        
        // Executar o script de preenchimento
        console.log('üìù Executando script de preenchimento autom√°tico...');
        await page.evaluate(fillScript);
        
        console.log('‚úÖ Script de preenchimento executado');
        
        // Aguardar um tempo para ver o resultado
        console.log('‚è≥ Aguardando conclus√£o do preenchimento...');
        await page.waitForTimeout(10000);
        
        console.log('üéâ Automa√ß√£o conclu√≠da com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro durante a automa√ß√£o:', error.message);
        throw error;
    } finally {
        if (browser) {
            // Manter o navegador aberto por mais tempo para verificar o resultado
            console.log('üîç Mantendo navegador aberto para verifica√ß√£o...');
            setTimeout(async () => {
                await browser.close();
                console.log('üîå Navegador fechado');
            }, 30000);
        }
    }
}

// Executar a automa√ß√£o
executeBrowserAutomation()
    .then(() => {
        console.log('\n‚úÖ Automa√ß√£o executada com sucesso!');
    })
    .catch((error) => {
        console.error('\n‚ùå Erro na automa√ß√£o:', error);
        process.exit(1);
    });