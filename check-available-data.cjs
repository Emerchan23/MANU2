require('dotenv').config()
const mysql = require('mysql2/promise')

async function checkAvailableData() {
  const connection = await mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME
  })

  try {
    console.log('üîç Verificando dados dispon√≠veis no banco...\n')

    // Verificar empresas
    console.log('üìã EMPRESAS DISPON√çVEIS:')
    try {
      const [companies] = await connection.execute('SELECT id, name FROM companies LIMIT 5')
      companies.forEach(company => {
        console.log(`  - ID: ${company.id}, Nome: ${company.name}`)
      })
    } catch (error) {
      console.log('  ‚ö†Ô∏è Tabela companies n√£o encontrada, tentando empresas...')
      try {
        const [companies] = await connection.execute('SELECT id, name FROM empresas LIMIT 5')
        companies.forEach(company => {
          console.log(`  - ID: ${company.id}, Nome: ${company.name}`)
        })
      } catch (error2) {
        console.log('  ‚ùå Nenhuma tabela de empresas encontrada')
      }
    }

    // Verificar equipamentos
    console.log('\nüîß EQUIPAMENTOS DISPON√çVEIS:')
    try {
      const [equipment] = await connection.execute(`
        SELECT e.id, e.name, e.model, e.setor_id, e.subsetor_id
        FROM equipment e 
        LIMIT 5
      `)
      equipment.forEach(eq => {
        console.log(`  - ID: ${eq.id}, Nome: ${eq.name}, Modelo: ${eq.model}, Setor ID: ${eq.setor_id}, Subsetor ID: ${eq.subsetor_id}`)
      })
    } catch (error) {
      console.log('  ‚ùå Tabela equipment n√£o encontrada:', error.message)
    }

    // Verificar usu√°rios
    console.log('\nüë• USU√ÅRIOS DISPON√çVEIS:')
    try {
      const [users] = await connection.execute('SELECT id, name, email FROM users LIMIT 5')
      users.forEach(user => {
        console.log(`  - ID: ${user.id}, Nome: ${user.name}, Email: ${user.email}`)
      })
    } catch (error) {
      console.log('  ‚ùå Tabela users n√£o encontrada')
    }

    // Verificar tipos de manuten√ß√£o
    console.log('\nüî® TIPOS DE MANUTEN√á√ÉO:')
    try {
      const [maintenanceTypes] = await connection.execute('SELECT id, name, description FROM maintenance_types')
      maintenanceTypes.forEach(type => {
        console.log(`  - ID: ${type.id}, Nome: ${type.name}, Descri√ß√£o: ${type.description}`)
      })
    } catch (error) {
      console.log('  ‚ùå Tabela maintenance_types n√£o encontrada')
    }

    // Verificar templates de servi√ßo
    console.log('\nüìÑ TEMPLATES DE SERVI√áO:')
    try {
      const [templates] = await connection.execute('SELECT id, name, description FROM service_templates WHERE active = 1 LIMIT 5')
      templates.forEach(template => {
        console.log(`  - ID: ${template.id}, Nome: ${template.name}`)
      })
    } catch (error) {
      console.log('  ‚ùå Tabela service_templates n√£o encontrada')
    }

    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!')

  } catch (error) {
    console.error('‚ùå Erro ao verificar dados:', error.message)
  } finally {
    await connection.end()
  }
}

checkAvailableData()