const mysql = require('mysql2/promise');

// Script para diagnosticar e corrigir problemas de conex√µes no MariaDB

async function diagnoseAndFix() {
  console.log('üîç Diagnosticando problemas de conex√£o no MariaDB...');
  
  let connection;
  
  try {
    // Tentar conex√£o simples sem pool
    console.log('üîó Tentando conex√£o direta...');
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'hospital_maintenance'
    });
    
    console.log('‚úÖ Conex√£o direta estabelecida!');
    
    // Verificar conex√µes ativas
    console.log('üìä Verificando conex√µes ativas...');
    const [processlist] = await connection.query('SHOW PROCESSLIST');
    console.log(`üìä Total de conex√µes ativas: ${processlist.length}`);
    
    // Mostrar detalhes das conex√µes
    console.log('üìã Detalhes das conex√µes:');
    processlist.forEach((proc, index) => {
      if (index < 10) { // Mostrar apenas as primeiras 10
        console.log(`  ${proc.Id}: ${proc.User}@${proc.Host} - ${proc.Command} - ${proc.Time}s - ${proc.State || 'N/A'}`);
      }
    });
    
    if (processlist.length > 10) {
      console.log(`  ... e mais ${processlist.length - 10} conex√µes`);
    }
    
    // Verificar configura√ß√µes do servidor
    console.log('‚öôÔ∏è Verificando configura√ß√µes do servidor...');
    const [maxConnections] = await connection.query("SHOW VARIABLES LIKE 'max_connections'");
    console.log(`‚öôÔ∏è M√°ximo de conex√µes permitidas: ${maxConnections[0].Value}`);
    
    const [threadsConnected] = await connection.query("SHOW STATUS LIKE 'Threads_connected'");
    console.log(`‚öôÔ∏è Conex√µes atualmente conectadas: ${threadsConnected[0].Value}`);
    
    const [maxUsedConnections] = await connection.query("SHOW STATUS LIKE 'Max_used_connections'");
    console.log(`‚öôÔ∏è M√°ximo de conex√µes j√° utilizadas: ${maxUsedConnections[0].Value}`);
    
    // Verificar conex√µes idle/sleeping
    const sleepingConnections = processlist.filter(proc => proc.Command === 'Sleep');
    console.log(`üò¥ Conex√µes idle/sleeping: ${sleepingConnections.length}`);
    
    // Matar conex√µes idle antigas (mais de 5 minutos)
    console.log('üßπ Limpando conex√µes idle antigas...');
    let killedCount = 0;
    
    for (const proc of sleepingConnections) {
      if (proc.Time > 300 && proc.User !== 'root') { // Mais de 5 minutos e n√£o √© root
        try {
          await connection.query(`KILL ${proc.Id}`);
          killedCount++;
          console.log(`üíÄ Matou conex√£o idle: ${proc.Id} (${proc.Time}s idle)`);
        } catch (killError) {
          console.log(`‚ö†Ô∏è N√£o foi poss√≠vel matar conex√£o ${proc.Id}: ${killError.message}`);
        }
      }
    }
    
    console.log(`üßπ Total de conex√µes idle removidas: ${killedCount}`);
    
    // Verificar novamente ap√≥s limpeza
    console.log('üîÑ Verificando status ap√≥s limpeza...');
    const [newProcesslist] = await connection.query('SHOW PROCESSLIST');
    console.log(`üìä Conex√µes ativas ap√≥s limpeza: ${newProcesslist.length}`);
    
    const [newThreadsConnected] = await connection.query("SHOW STATUS LIKE 'Threads_connected'");
    console.log(`‚öôÔ∏è Threads conectadas ap√≥s limpeza: ${newThreadsConnected[0].Value}`);
    
    // Sugest√µes de otimiza√ß√£o
    console.log('\nüí° SUGEST√ïES DE OTIMIZA√á√ÉO:');
    
    if (parseInt(threadsConnected[0].Value) > parseInt(maxConnections[0].Value) * 0.8) {
      console.log('‚ö†Ô∏è Uso de conex√µes est√° alto (>80%). Considere:');
      console.log('   - Aumentar max_connections no MariaDB');
      console.log('   - Reduzir connectionLimit na aplica√ß√£o');
      console.log('   - Implementar connection pooling mais eficiente');
    }
    
    if (sleepingConnections.length > 10) {
      console.log('‚ö†Ô∏è Muitas conex√µes idle. Considere:');
      console.log('   - Reduzir wait_timeout no MariaDB');
      console.log('   - Implementar auto-close de conex√µes idle');
    }
    
    console.log('\nüéØ CONFIGURA√á√ïES RECOMENDADAS PARA MARIADB:');
    console.log('   max_connections = 200');
    console.log('   wait_timeout = 300');
    console.log('   interactive_timeout = 300');
    console.log('   max_connect_errors = 100');
    
    console.log('\nüéØ CONFIGURA√á√ïES RECOMENDADAS PARA A APLICA√á√ÉO:');
    console.log('   connectionLimit: 5-10');
    console.log('   acquireTimeout: 60000');
    console.log('   idleTimeout: 300000');
    console.log('   maxIdle: 3-5');
    
  } catch (error) {
    console.error('‚ùå Erro durante diagn√≥stico:', error.message);
    console.error('‚ùå C√≥digo:', error.code);
    
    if (error.code === 'ER_CON_COUNT_ERROR') {
      console.log('\nüö® PROBLEMA IDENTIFICADO: Muitas conex√µes!');
      console.log('üí° SOLU√á√ïES IMEDIATAS:');
      console.log('   1. Reiniciar o MariaDB para limpar conex√µes');
      console.log('   2. Aumentar max_connections no MariaDB');
      console.log('   3. Reduzir connectionLimit na aplica√ß√£o');
      console.log('   4. Implementar limpeza autom√°tica de conex√µes idle');
    }
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîö Conex√£o de diagn√≥stico fechada');
    }
  }
}