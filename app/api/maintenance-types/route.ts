import { NextRequest, NextResponse } from 'next/server'
import mysql from 'mysql2/promise'

// Configura√ß√£o do banco de dados MariaDB
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'hospital_maintenance',
  port: parseInt(process.env.DB_PORT || '3306'),
  charset: 'utf8mb4',
  timezone: '+00:00'
}

export async function GET(request: NextRequest) {
  let connection;
  try {
    console.log('üîç API maintenance-types - GET request received');
    connection = await mysql.createConnection(dbConfig)
    
    // Primeiro, verificar se a tabela tipos_manutencao existe e tem dados v√°lidos
    const [tableCheck] = await connection.execute(`
      SELECT COUNT(*) as count 
      FROM INFORMATION_SCHEMA.TABLES 
      WHERE TABLE_SCHEMA = ? AND TABLE_NAME = 'tipos_manutencao'
    `, [dbConfig.database]);
    
    if (tableCheck[0].count === 0) {
      console.log('‚ùå Tabela tipos_manutencao n√£o existe, criando...');
      
      // Criar tabela
      await connection.execute(`
        CREATE TABLE tipos_manutencao (
          id INT(11) NOT NULL AUTO_INCREMENT,
          nome VARCHAR(100) NOT NULL,
          descricao TEXT NULL,
          categoria VARCHAR(50) NOT NULL DEFAULT 'preventiva',
          ativo BOOLEAN NOT NULL DEFAULT TRUE,
          criado_em DATETIME DEFAULT CURRENT_TIMESTAMP,
          atualizado_em DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
          PRIMARY KEY (id),
          UNIQUE KEY uk_tipos_manutencao_nome (nome)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
      `);
      
      // Inserir dados b√°sicos
      await connection.execute(`
        INSERT INTO tipos_manutencao (nome, descricao, categoria) VALUES 
        ('Preventiva', 'Manuten√ß√£o preventiva programada', 'preventiva'),
        ('Corretiva', 'Manuten√ß√£o corretiva para reparo', 'corretiva'),
        ('Preditiva', 'Manuten√ß√£o baseada em condi√ß√£o', 'preditiva'),
        ('Calibra√ß√£o', 'Calibra√ß√£o de equipamentos', 'calibracao'),
        ('Instala√ß√£o', 'Instala√ß√£o de novos equipamentos', 'instalacao'),
        ('Desinstala√ß√£o', 'Remo√ß√£o de equipamentos', 'desinstalacao'),
        ('Consultoria', 'Servi√ßos de consultoria t√©cnica', 'consultoria')
      `);
      
      console.log('‚úÖ Tabela tipos_manutencao criada e populada');
    }
    
    // Verificar se existem dados v√°lidos
    const [dataCheck] = await connection.execute(
      'SELECT COUNT(*) as count FROM tipos_manutencao WHERE ativo = 1 AND nome IS NOT NULL AND nome != ""'
    );
    
    if (dataCheck[0].count === 0) {
      console.log('‚ùå N√£o h√° dados v√°lidos, inserindo dados padr√£o...');
      
      // Limpar dados inv√°lidos
      await connection.execute('DELETE FROM tipos_manutencao WHERE nome IS NULL OR nome = "" OR nome IN ("4444", "treretetretre")');
      
      // Inserir dados v√°lidos
      await connection.execute(`
        INSERT IGNORE INTO tipos_manutencao (nome, descricao, categoria) VALUES 
        ('Preventiva', 'Manuten√ß√£o preventiva programada', 'preventiva'),
        ('Corretiva', 'Manuten√ß√£o corretiva para reparo', 'corretiva'),
        ('Preditiva', 'Manuten√ß√£o baseada em condi√ß√£o', 'preditiva'),
        ('Calibra√ß√£o', 'Calibra√ß√£o de equipamentos', 'calibracao'),
        ('Instala√ß√£o', 'Instala√ß√£o de novos equipamentos', 'instalacao'),
        ('Desinstala√ß√£o', 'Remo√ß√£o de equipamentos', 'desinstalacao'),
        ('Consultoria', 'Servi√ßos de consultoria t√©cnica', 'consultoria')
      `);
      
      console.log('‚úÖ Dados v√°lidos inseridos');
    }
    
    // Buscar tipos com filtro opcional de status
    const url = new URL(request.url);
    const statusFilter = url.searchParams.get('status') || 'active'; // 'active', 'inactive', 'all'
    
    let whereClause = 'WHERE nome IS NOT NULL AND nome != ""';
    if (statusFilter === 'active') {
      whereClause += ' AND ativo = 1';
    } else if (statusFilter === 'inactive') {
      whereClause += ' AND ativo = 0';
    }
    // Para 'all', n√£o adiciona filtro de ativo
    
    const [rows] = await connection.execute(`
      SELECT 
        id, 
        nome as name, 
        COALESCE(descricao, '') as description, 
        COALESCE(categoria, 'preventiva') as category, 
        ativo as isActive, 
        criado_em as createdAt, 
        atualizado_em as updatedAt 
      FROM tipos_manutencao 
      ${whereClause}
      ORDER BY nome ASC
    `);
    
    console.log('üîç API maintenance-types - Rows found:', rows);
    
    // Retornar no formato esperado pelo formul√°rio
    const response = {
      success: true,
      data: rows
    };
    
    console.log('üîç API maintenance-types - Response:', response);
    
    return NextResponse.json(response)
  } catch (error) {
    console.error('‚ùå API maintenance-types - Erro ao buscar tipos de manuten√ß√£o:', error)
    return NextResponse.json(
      { 
        success: false,
        error: 'Erro interno do servidor: ' + error.message
      },
      { status: 500 }
    )
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

export async function POST(request: NextRequest) {
  let connection;
  try {
    console.log('üîÑ API /api/maintenance-types - POST request received');
    const body = await request.json();
    console.log('üìä Request body:', body);
    
    const { name, description, category = 'preventiva', isActive = true } = body;
    console.log('üìä Parsed data:', { name, description, category, isActive });
    
    // Valida√ß√£o simples
    if (!name) {
      return NextResponse.json(
        { success: false, error: 'Nome √© obrigat√≥rio' },
        { status: 400 }
      )
    }
    
    connection = await mysql.createConnection(dbConfig)
    console.log('‚úÖ Database connection established');
    
    // Inserir novo tipo de manuten√ß√£o
    const [result] = await connection.execute(
      'INSERT INTO tipos_manutencao (nome, descricao, categoria, ativo) VALUES (?, ?, ?, ?)',
      [name, description || null, category, isActive]
    );
    console.log('‚úÖ INSERT query executed:', result);
    
    const insertId = (result as any).insertId;
    
    return NextResponse.json(
      { 
        success: true,
        data: {
          id: insertId,
          name,
          description,
          category,
          isActive
        },
        message: 'Tipo de manuten√ß√£o criado com sucesso'
      },
      { status: 201 }
    );
  } catch (error) {
    console.error('‚ùå Erro ao criar tipo de manuten√ß√£o:', error)
    return NextResponse.json(
      { success: false, error: 'Erro interno do servidor ao criar tipo de manuten√ß√£o' },
      { status: 500 }
    )
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

export async function PUT(request: NextRequest) {
  try {
    const body = await request.json();
    const { id, name, isActive } = body;
    
    if (!id || !name) {
      return NextResponse.json(
        { error: 'ID e nome s√£o obrigat√≥rios' },
        { status: 400 }
      )
    }
    
    const connection = await mysql.createConnection(dbConfig)
    
    // Verificar se o tipo existe
    const [existing] = await connection.execute(
      'SELECT id FROM tipos_manutencao WHERE id = ?',
      [id]
    )
    
    if (!Array.isArray(existing) || existing.length === 0) {
      await connection.end()
      return NextResponse.json(
        { error: 'Tipo de manuten√ß√£o n√£o encontrado' },
        { status: 404 }
      )
    }
    
    // Atualizar tipo de manuten√ß√£o (apenas nome e ativo)
    await connection.execute(
      'UPDATE tipos_manutencao SET nome = ?, ativo = ?, atualizado_em = NOW() WHERE id = ?',
      [name, isActive, id]
    );
    
    await connection.end()
    
    return NextResponse.json({
      id,
      name,
      isActive,
      message: 'Tipo de manuten√ß√£o atualizado com sucesso'
    });
  } catch (error) {
    console.error('Erro ao atualizar tipo de manuten√ß√£o:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const id = searchParams.get('id')
    
    if (!id) {
      return NextResponse.json(
        { error: 'ID √© obrigat√≥rio' },
        { status: 400 }
      )
    }
    
    const connection = await mysql.createConnection(dbConfig)
    
    // Verificar se o tipo existe
    const [existing] = await connection.execute(
      'SELECT id FROM tipos_manutencao WHERE id = ?',
      [id]
    )
    
    if (!Array.isArray(existing) || existing.length === 0) {
      await connection.end()
      return NextResponse.json(
        { error: 'Tipo de manuten√ß√£o n√£o encontrado' },
        { status: 404 }
      )
    }
    
    // Deletar tipo de manuten√ß√£o
    await connection.execute(
      'DELETE FROM tipos_manutencao WHERE id = ?',
      [id]
    )
    
    await connection.end()
    
    return NextResponse.json({
      message: 'Tipo de manuten√ß√£o exclu√≠do com sucesso'
    })
  } catch (error) {
    console.error('Erro ao excluir tipo de manuten√ß√£o:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}