const mysql = require('mysql2/promise');

// Configura√ß√£o do banco de dados
const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'hospital_maintenance'
};

async function testSectorDeletionFix() {
  let connection;
  
  try {
    console.log('üîß Testando corre√ß√£o da exclus√£o de setores...');
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Conectado ao banco de dados');

    // 1. Testar exclus√£o do setor Administra√ß√£o (ID: 3)
    console.log('\nüß™ === TESTE 1: SETOR ADMINISTRA√á√ÉO ===');
    const adminSectorId = 3;
    
    // Verificar equipamentos vinculados
    const [adminEquipments] = await connection.execute(`
      SELECT COUNT(*) as count FROM equipment WHERE sector_id = ?
    `, [adminSectorId]);
    
    console.log(`üì¶ Equipamentos vinculados ao setor Administra√ß√£o: ${adminEquipments[0].count}`);
    
    if (adminEquipments[0].count > 0) {
      console.log('‚ùå Setor Administra√ß√£o n√£o pode ser exclu√≠do - possui equipamentos');
      
      // Mostrar os equipamentos
      const [equipmentList] = await connection.execute(`
        SELECT id, name FROM equipment WHERE sector_id = ?
      `, [adminSectorId]);
      console.log('Equipamentos:', equipmentList);
    } else {
      console.log('‚úÖ Setor Administra√ß√£o pode ser exclu√≠do - sem equipamentos');
    }

    // 2. Testar exclus√£o do setor Enfermagem (ID: 4)
    console.log('\nüß™ === TESTE 2: SETOR ENFERMAGEM ===');
    const nursingSectorId = 4;
    
    // Verificar equipamentos vinculados
    const [nursingEquipments] = await connection.execute(`
      SELECT COUNT(*) as count FROM equipment WHERE sector_id = ?
    `, [nursingSectorId]);
    
    console.log(`üì¶ Equipamentos vinculados ao setor Enfermagem: ${nursingEquipments[0].count}`);
    
    if (nursingEquipments[0].count > 0) {
      console.log('‚ùå Setor Enfermagem n√£o pode ser exclu√≠do - possui equipamentos');
      
      // Mostrar os equipamentos
      const [equipmentList] = await connection.execute(`
        SELECT id, name FROM equipment WHERE sector_id = ?
      `, [nursingSectorId]);
      console.log('Equipamentos:', equipmentList);
    } else {
      console.log('‚úÖ Setor Enfermagem pode ser exclu√≠do - sem equipamentos');
    }

    // 3. Testar um setor que deveria poder ser exclu√≠do
    console.log('\nüß™ === TESTE 3: SETOR SEM DEPEND√äNCIAS ===');
    
    // Buscar um setor sem equipamentos
    const [sectorsWithoutEquipments] = await connection.execute(`
      SELECT s.id, s.nome 
      FROM setores s
      LEFT JOIN equipment e ON s.id = e.sector_id
      WHERE e.id IS NULL
      LIMIT 1
    `);
    
    if (sectorsWithoutEquipments.length > 0) {
      const testSector = sectorsWithoutEquipments[0];
      console.log(`üìã Testando setor sem depend√™ncias: ${testSector.nome} (ID: ${testSector.id})`);
      
      // Verificar subsetores
      const [subsectors] = await connection.execute(`
        SELECT COUNT(*) as count FROM subsetores WHERE setor_id = ?
      `, [testSector.id]);
      
      console.log(`üìÇ Subsetores: ${subsectors[0].count}`);
      
      if (subsectors[0].count === 0) {
        console.log('‚úÖ Este setor pode ser exclu√≠do - sem depend√™ncias');
      } else {
        console.log('‚ùå Este setor n√£o pode ser exclu√≠do - possui subsetores');
      }
    } else {
      console.log('‚ÑπÔ∏è Todos os setores possuem equipamentos vinculados');
    }

    // 4. Simular corre√ß√£o - mostrar como resolver o problema
    console.log('\nüí° === SOLU√á√ïES PARA O PROBLEMA ===');
    console.log('Para permitir a exclus√£o dos setores Administra√ß√£o e Enfermagem:');
    console.log('');
    console.log('OP√á√ÉO 1: Mover equipamentos para outro setor');
    console.log('- Transferir os equipamentos para um setor diferente');
    console.log('- Depois excluir o setor vazio');
    console.log('');
    console.log('OP√á√ÉO 2: Exclus√£o em cascata (cuidado!)');
    console.log('- Modificar a API para permitir exclus√£o for√ßada');
    console.log('- Excluir primeiro os equipamentos, depois o setor');
    console.log('');
    console.log('OP√á√ÉO 3: Desativar ao inv√©s de excluir');
    console.log('- Adicionar campo "ativo" na tabela setores');
    console.log('- Marcar como inativo ao inv√©s de excluir');

    // 5. Verificar se a corre√ß√£o da API funcionou
    console.log('\nüîç === VERIFICA√á√ÉO DA CORRE√á√ÉO DA API ===');
    console.log('A API foi corrigida para usar a tabela "equipment" ao inv√©s de "equipamentos"');
    console.log('Isso deve resolver o erro de tabela n√£o encontrada');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå Conex√£o com o banco fechada');
    }
  }
}

// Executar o teste
testSectorDeletionFix().catch(console.error);