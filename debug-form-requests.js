// Script para interceptar e debugar requisi√ß√µes do formul√°rio
// Adicione este script na p√°gina de edi√ß√£o de equipamentos para monitorar o que est√° sendo enviado

(function() {
    console.log('üîç Debug script carregado - monitorando requisi√ß√µes...');
    
    // Interceptar fetch original
    const originalFetch = window.fetch;
    
    window.fetch = function(...args) {
        const [url, options] = args;
        
        // Verificar se √© uma requisi√ß√£o para a API de equipamentos
        if (url && url.includes('/api/equipment/')) {
            console.log('üöÄ Interceptando requisi√ß√£o para:', url);
            console.log('üì§ M√©todo:', options?.method || 'GET');
            
            if (options?.body) {
                try {
                    const bodyData = JSON.parse(options.body);
                    console.log('üìä Dados sendo enviados:');
                    console.log('   - name:', bodyData.name);
                    console.log('   - category_id:', bodyData.category_id);
                    console.log('   - sector_id:', bodyData.sector_id);
                    console.log('   - subsector_id:', bodyData.subsector_id, bodyData.subsector_id ? '‚úÖ' : '‚ùå');
                    console.log('   - voltage:', bodyData.voltage, bodyData.voltage ? '‚úÖ' : '‚ùå');
                    console.log('   - manufacturer:', bodyData.manufacturer);
                    console.log('   - model:', bodyData.model);
                    console.log('   - status:', bodyData.status);
                    console.log('üìã Payload completo:', bodyData);
                } catch (e) {
                    console.log('üìã Body (n√£o JSON):', options.body);
                }
            }
        }
        
        // Chamar fetch original e interceptar resposta
        return originalFetch.apply(this, args).then(response => {
            if (url && url.includes('/api/equipment/')) {
                console.log('üì• Resposta recebida:', response.status, response.statusText);
                
                // Clonar resposta para poder ler o body sem consumir o stream
                const clonedResponse = response.clone();
                clonedResponse.json().then(data => {
                    console.log('üìä Dados da resposta:', data);
                    if (data.success && data.data) {
                        console.log('‚úÖ Equipamento salvo com:');
                        console.log('   - subsector_id:', data.data.subsector_id);
                        console.log('   - voltage:', data.data.voltage);
                    }
                }).catch(e => {
                    console.log('‚ùå Erro ao parsear resposta:', e);
                });
            }
            
            return response;
        });
    };
    
    // Monitorar mudan√ßas no formul√°rio
    function monitorFormChanges() {
        const form = document.querySelector('form');
        if (form) {
            console.log('üìù Formul√°rio encontrado, monitorando mudan√ßas...');
            
            // Monitorar submiss√£o do formul√°rio
            form.addEventListener('submit', function(e) {
                console.log('üöÄ Formul√°rio sendo submetido!');
                
                // Capturar dados do formul√°rio
                const formData = new FormData(form);
                const formObject = {};
                for (let [key, value] of formData.entries()) {
                    formObject[key] = value;
                }
                console.log('üìã Dados do formul√°rio:', formObject);
            });
            
            // Monitorar mudan√ßas nos campos espec√≠ficos
            const subsectorSelect = document.querySelector('select[name="subsector_id"], #subsector_id');
            const voltageSelect = document.querySelector('select[name="voltage"], #voltage');
            
            if (subsectorSelect) {
                console.log('üéØ Campo subsector_id encontrado');
                subsectorSelect.addEventListener('change', function(e) {
                    console.log('üîÑ Subsetor alterado para:', e.target.value);
                });
            } else {
                console.log('‚ùå Campo subsector_id N√ÉO encontrado');
            }
            
            if (voltageSelect) {
                console.log('üéØ Campo voltage encontrado');
                voltageSelect.addEventListener('change', function(e) {
                    console.log('üîÑ Voltagem alterada para:', e.target.value);
                });
            } else {
                console.log('‚ùå Campo voltage N√ÉO encontrado');
            }
        } else {
            console.log('‚ùå Formul√°rio n√£o encontrado, tentando novamente em 1s...');
            setTimeout(monitorFormChanges, 1000);
        }
    }
    
    // Iniciar monitoramento quando a p√°gina carregar
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', monitorFormChanges);
    } else {
        monitorFormChanges();
    }
    
    console.log('‚úÖ Debug script ativo - verifique o console durante o uso do formul√°rio');
})();

// Fun√ß√£o para verificar estado atual dos campos
function checkCurrentFormState() {
    console.log('üîç Verificando estado atual do formul√°rio...');
    
    const categorySelect = document.querySelector('select');
    const subsectorSelect = document.querySelector('select[name="subsector_id"]');
    const voltageSelect = document.querySelector('select[name="voltage"]');
    
    console.log('üìä Estado dos campos:');
    console.log('   - Categoria selecionada:', categorySelect?.value || 'Nenhuma');
    console.log('   - Subsetor selecionado:', subsectorSelect?.value || 'Nenhum');
    console.log('   - Voltagem selecionada:', voltageSelect?.value || 'Nenhuma');
    console.log('   - Campo voltagem vis√≠vel:', voltageSelect?.offsetParent !== null);
}

// Disponibilizar fun√ß√£o globalmente
window.checkCurrentFormState = checkCurrentFormState;

console.log('üí° Use checkCurrentFormState() no console para verificar o estado atual dos campos');