const mysql = require('mysql2/promise');

// Configura√ß√£o do banco de dados
const dbConfig = {
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'hospital_maintenance'
};

async function removeSectorsComplete() {
  let connection;
  
  try {
    console.log('üîß Iniciando remo√ß√£o completa dos setores Administra√ß√£o e Enfermagem...');
    
    // Conectar ao banco
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Conectado ao banco de dados');

    // Come√ßar transa√ß√£o para garantir integridade
    await connection.beginTransaction();
    console.log('üîÑ Transa√ß√£o iniciada');

    // ETAPA 1: Identificar equipamentos dos setores
    console.log('\nüìã === ETAPA 1: IDENTIFICANDO EQUIPAMENTOS ===');
    
    const [equipments] = await connection.execute(`
      SELECT id, name, sector_id 
      FROM equipment 
      WHERE sector_id IN (3, 4)
    `);
    
    console.log(`Equipamentos encontrados: ${equipments.length}`);
    equipments.forEach(eq => {
      console.log(`- ID: ${eq.id}, Nome: ${eq.name}, Setor: ${eq.sector_id}`);
    });

    if (equipments.length === 0) {
      console.log('‚ö†Ô∏è Nenhum equipamento encontrado nos setores');
    }

    // ETAPA 2: Excluir ordens de servi√ßo
    console.log('\nüóëÔ∏è === ETAPA 2: EXCLUINDO ORDENS DE SERVI√áO ===');
    
    if (equipments.length > 0) {
      const equipmentIds = equipments.map(eq => eq.id);
      
      // Primeiro, verificar quantas ordens existem
      const [serviceOrders] = await connection.execute(`
        SELECT COUNT(*) as count 
        FROM service_orders 
        WHERE equipment_id IN (${equipmentIds.map(() => '?').join(',')})
      `, equipmentIds);
      
      console.log(`Ordens de servi√ßo a serem exclu√≠das: ${serviceOrders[0].count}`);
      
      if (serviceOrders[0].count > 0) {
        // Excluir ordens de servi√ßo
        const [deleteOrders] = await connection.execute(`
          DELETE FROM service_orders 
          WHERE equipment_id IN (${equipmentIds.map(() => '?').join(',')})
        `, equipmentIds);
        
        console.log(`‚úÖ ${deleteOrders.affectedRows} ordens de servi√ßo exclu√≠das`);
      }
    }

    // ETAPA 3: Excluir equipamentos
    console.log('\nüîß === ETAPA 3: EXCLUINDO EQUIPAMENTOS ===');
    
    if (equipments.length > 0) {
      const [deleteEquipments] = await connection.execute(`
        DELETE FROM equipment 
        WHERE sector_id IN (3, 4)
      `);
      
      console.log(`‚úÖ ${deleteEquipments.affectedRows} equipamentos exclu√≠dos`);
    }

    // ETAPA 4: Excluir subsetores (se existirem)
    console.log('\nüìÇ === ETAPA 4: VERIFICANDO SUBSETORES ===');
    
    const [subsectors] = await connection.execute(`
      SELECT COUNT(*) as count 
      FROM subsetores 
      WHERE setor_id IN (3, 4)
    `);
    
    console.log(`Subsetores encontrados: ${subsectors[0].count}`);
    
    if (subsectors[0].count > 0) {
      const [deleteSubsectors] = await connection.execute(`
        DELETE FROM subsetores 
        WHERE setor_id IN (3, 4)
      `);
      
      console.log(`‚úÖ ${deleteSubsectors.affectedRows} subsetores exclu√≠dos`);
    }

    // ETAPA 5: Excluir os setores
    console.log('\nüè¢ === ETAPA 5: EXCLUINDO SETORES ===');
    
    // Setor Administra√ß√£o (ID: 3)
    const [deleteAdmin] = await connection.execute(`
      DELETE FROM setores WHERE id = 3
    `);
    console.log(`‚úÖ Setor Administra√ß√£o: ${deleteAdmin.affectedRows} registro exclu√≠do`);
    
    // Setor Enfermagem (ID: 4)
    const [deleteNursing] = await connection.execute(`
      DELETE FROM setores WHERE id = 4
    `);
    console.log(`‚úÖ Setor Enfermagem: ${deleteNursing.affectedRows} registro exclu√≠do`);

    // Confirmar transa√ß√£o
    await connection.commit();
    console.log('\n‚úÖ === TRANSA√á√ÉO CONFIRMADA ===');

    // ETAPA 6: Verifica√ß√£o final
    console.log('\nüîç === ETAPA 6: VERIFICA√á√ÉO FINAL ===');
    
    const [remainingSectors] = await connection.execute(`
      SELECT id, nome FROM setores WHERE id IN (3, 4)
    `);
    
    const [remainingEquipments] = await connection.execute(`
      SELECT COUNT(*) as count FROM equipment WHERE sector_id IN (3, 4)
    `);
    
    const [remainingOrders] = await connection.execute(`
      SELECT COUNT(*) as count FROM service_orders 
      WHERE equipment_id IN (
        SELECT id FROM equipment WHERE sector_id IN (3, 4)
      )
    `);

    console.log(`Setores restantes: ${remainingSectors.length}`);
    console.log(`Equipamentos restantes: ${remainingEquipments[0].count}`);
    console.log(`Ordens de servi√ßo restantes: ${remainingOrders[0].count}`);

    if (remainingSectors.length === 0 && remainingEquipments[0].count === 0 && remainingOrders[0].count === 0) {
      console.log('\nüéâ === REMO√á√ÉO COMPLETA BEM-SUCEDIDA ===');
      console.log('‚úÖ Todos os setores, equipamentos e ordens de servi√ßo foram removidos com sucesso!');
    } else {
      console.log('\n‚ö†Ô∏è === ATEN√á√ÉO ===');
      console.log('Alguns registros podem n√£o ter sido removidos completamente');
    }

  } catch (error) {
    console.error('‚ùå Erro durante a remo√ß√£o:', error.message);
    
    if (connection) {
      try {
        await connection.rollback();
        console.log('üîÑ Transa√ß√£o revertida devido ao erro');
      } catch (rollbackError) {
        console.error('‚ùå Erro ao reverter transa√ß√£o:', rollbackError.message);
      }
    }
    
    throw error;
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå Conex√£o com o banco fechada');
    }
  }
}

// Executar o script
removeSectorsComplete().catch(console.error);