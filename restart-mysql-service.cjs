const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);

async function restartMySQLService() {
    try {
        console.log('üîß Tentando reiniciar o servi√ßo MySQL...');
        
        // Tentar parar o servi√ßo MySQL
        try {
            console.log('‚èπÔ∏è Parando servi√ßo MySQL...');
            await execPromise('net stop mysql');
            console.log('‚úÖ Servi√ßo MySQL parado');
        } catch (error) {
            console.log('‚ö†Ô∏è Erro ao parar MySQL (pode j√° estar parado):', error.message);
        }
        
        // Aguardar um pouco
        console.log('‚è≥ Aguardando 3 segundos...');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // Tentar iniciar o servi√ßo MySQL
        try {
            console.log('‚ñ∂Ô∏è Iniciando servi√ßo MySQL...');
            await execPromise('net start mysql');
            console.log('‚úÖ Servi√ßo MySQL iniciado');
        } catch (error) {
            console.log('‚ùå Erro ao iniciar MySQL:', error.message);
            
            // Tentar com XAMPP
            console.log('üîß Tentando iniciar MySQL via XAMPP...');
            try {
                await execPromise('"C:\\xampp\\mysql\\bin\\mysqld.exe" --defaults-file="C:\\xampp\\mysql\\bin\\my.ini" --standalone --console');
                console.log('‚úÖ MySQL iniciado via XAMPP');
            } catch (xamppError) {
                console.log('‚ùå Erro ao iniciar MySQL via XAMPP:', xamppError.message);
            }
        }
        
        // Aguardar mais um pouco
        console.log('‚è≥ Aguardando 5 segundos para estabilizar...');
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        console.log('‚úÖ Processo de reinicializa√ß√£o do MySQL conclu√≠do!');
        
    } catch (error) {
        console.error('‚ùå Erro geral ao reiniciar MySQL:', error.message);
    }
}

restartMySQLService();